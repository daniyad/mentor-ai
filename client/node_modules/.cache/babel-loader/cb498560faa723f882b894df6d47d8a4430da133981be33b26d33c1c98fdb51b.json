{"ast":null,"code":"import { parser } from '@lezer/rust';\nimport { LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA syntax provider based on the [Lezer Rust\nparser](https://github.com/lezer-parser/rust), extended with\nhighlighting and indentation information.\n*/\nconst rustLanguage = /*@__PURE__*/LRLanguage.define({\n  name: \"rust\",\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfExpression: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b)/\n      }),\n      \"String BlockComment\": () => null,\n      \"AttributeItem\": cx => cx.continue(),\n      \"Statement MatchArm\": /*@__PURE__*/continuedIndent()\n    }), /*@__PURE__*/foldNodeProp.add(type => {\n      if (/(Block|edTokens|List)$/.test(type.name)) return foldInside;\n      if (type.name == \"BlockComment\") return tree => ({\n        from: tree.from + 2,\n        to: tree.to - 2\n      });\n      return undefined;\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    indentOnInput: /^\\s*(?:\\{|\\})$/,\n    closeBrackets: {\n      stringPrefixes: [\"b\", \"r\", \"br\"]\n    }\n  }\n});\n/**\nRust language support\n*/\nfunction rust() {\n  return new LanguageSupport(rustLanguage);\n}\nexport { rust, rustLanguage };","map":{"version":3,"names":["parser","LRLanguage","indentNodeProp","continuedIndent","foldNodeProp","foldInside","LanguageSupport","rustLanguage","define","name","configure","props","add","IfExpression","except","String BlockComment","cx","continue","type","test","tree","from","to","undefined","languageData","commentTokens","line","block","open","close","indentOnInput","closeBrackets","stringPrefixes","rust"],"sources":["/Users/EL-CAPITAN-2016/Development/mentor/client/node_modules/@codemirror/lang-rust/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/rust';\nimport { LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA syntax provider based on the [Lezer Rust\nparser](https://github.com/lezer-parser/rust), extended with\nhighlighting and indentation information.\n*/\nconst rustLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"rust\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfExpression: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b)/ }),\n                \"String BlockComment\": () => null,\n                \"AttributeItem\": cx => cx.continue(),\n                \"Statement MatchArm\": /*@__PURE__*/continuedIndent()\n            }),\n            /*@__PURE__*/foldNodeProp.add(type => {\n                if (/(Block|edTokens|List)$/.test(type.name))\n                    return foldInside;\n                if (type.name == \"BlockComment\")\n                    return tree => ({ from: tree.from + 2, to: tree.to - 2 });\n                return undefined;\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\n        indentOnInput: /^\\s*(?:\\{|\\})$/,\n        closeBrackets: { stringPrefixes: [\"b\", \"r\", \"br\"] }\n    }\n});\n/**\nRust language support\n*/\nfunction rust() {\n    return new LanguageSupport(rustLanguage);\n}\n\nexport { rust, rustLanguage };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;AACpC,SAASC,UAAU,EAAEC,cAAc,EAAEC,eAAe,EAAEC,YAAY,EAAEC,UAAU,EAAEC,eAAe,QAAQ,sBAAsB;;AAE7H;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,aAAaN,UAAU,CAACO,MAAM,CAAC;EAChDC,IAAI,EAAE,MAAM;EACZT,MAAM,EAAE,aAAaA,MAAM,CAACU,SAAS,CAAC;IAClCC,KAAK,EAAE,CACH,aAAaT,cAAc,CAACU,GAAG,CAAC;MAC5BC,YAAY,EAAE,aAAaV,eAAe,CAAC;QAAEW,MAAM,EAAE;MAAiB,CAAC,CAAC;MACxE,qBAAqB,EAAEC,CAAA,KAAM,IAAI;MACjC,eAAe,EAAEC,EAAE,IAAIA,EAAE,CAACC,QAAQ,CAAC,CAAC;MACpC,oBAAoB,EAAE,aAAad,eAAe,CAAC;IACvD,CAAC,CAAC,EACF,aAAaC,YAAY,CAACQ,GAAG,CAACM,IAAI,IAAI;MAClC,IAAI,wBAAwB,CAACC,IAAI,CAACD,IAAI,CAACT,IAAI,CAAC,EACxC,OAAOJ,UAAU;MACrB,IAAIa,IAAI,CAACT,IAAI,IAAI,cAAc,EAC3B,OAAOW,IAAI,KAAK;QAAEC,IAAI,EAAED,IAAI,CAACC,IAAI,GAAG,CAAC;QAAEC,EAAE,EAAEF,IAAI,CAACE,EAAE,GAAG;MAAE,CAAC,CAAC;MAC7D,OAAOC,SAAS;IACpB,CAAC,CAAC;EAEV,CAAC,CAAC;EACFC,YAAY,EAAE;IACVC,aAAa,EAAE;MAAEC,IAAI,EAAE,IAAI;MAAEC,KAAK,EAAE;QAAEC,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK;IAAE,CAAC;IACjEC,aAAa,EAAE,gBAAgB;IAC/BC,aAAa,EAAE;MAAEC,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI;IAAE;EACtD;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA,SAASC,IAAIA,CAAA,EAAG;EACZ,OAAO,IAAI3B,eAAe,CAACC,YAAY,CAAC;AAC5C;AAEA,SAAS0B,IAAI,EAAE1B,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}