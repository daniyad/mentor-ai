{"ast":null,"code":"function words(str) {\n  var obj = {},\n    words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = words(\"absolute and array asm begin case const constructor destructor div do \" + \"downto else end file for function goto if implementation in inherited \" + \"inline interface label mod nil not object of operator or packed procedure \" + \"program record reintroduce repeat self set shl shr string then to type \" + \"unit until uses var while with xor as class dispinterface except exports \" + \"finalization finally initialization inline is library on out packed \" + \"property raise resourcestring threadvar try absolute abstract alias \" + \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" + \"dynamic enumerator experimental export external far far16 forward generic \" + \"helper implements index interrupt iocheck local message name near \" + \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" + \"pascal platform private protected public published read register \" + \"reintroduce result safecall saveregisters softfloat specialize static \" + \"stdcall stored strict unaligned unimplemented varargs virtual write\");\nvar atoms = {\n  \"null\": true\n};\nvar isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == \"#\" && state.startOfLine) {\n    stream.skipToEnd();\n    return \"meta\";\n  }\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (ch == \"(\" && stream.eat(\"*\")) {\n    state.tokenize = tokenComment;\n    return tokenComment(stream, state);\n  }\n  if (ch == \"{\") {\n    state.tokenize = tokenCommentBraces;\n    return tokenCommentBraces(stream, state);\n  }\n  if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      next,\n      end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) state.tokenize = null;\n    return \"string\";\n  };\n}\nfunction tokenComment(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while (ch = stream.next()) {\n    if (ch == \")\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = ch == \"*\";\n  }\n  return \"comment\";\n}\nfunction tokenCommentBraces(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"}\") {\n      state.tokenize = null;\n      break;\n    }\n  }\n  return \"comment\";\n}\n\n// Interface\n\nexport const pascal = {\n  name: \"pascal\",\n  startState: function () {\n    return {\n      tokenize: null\n    };\n  },\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    return style;\n  },\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {\n      block: {\n        open: \"(*\",\n        close: \"*)\"\n      }\n    }\n  }\n};","map":{"version":3,"names":["words","str","obj","split","i","length","keywords","atoms","isOperatorChar","tokenBase","stream","state","ch","next","startOfLine","skipToEnd","tokenize","tokenString","eat","tokenComment","tokenCommentBraces","test","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","maybeEnd","pascal","name","startState","token","eatSpace","style","languageData","indentOnInput","commentTokens","block","open","close"],"sources":["/Users/EL-CAPITAN-2016/Development/mentor/client/node_modules/@codemirror/legacy-modes/mode/pascal.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = words(\n  \"absolute and array asm begin case const constructor destructor div do \" +\n    \"downto else end file for function goto if implementation in inherited \" +\n    \"inline interface label mod nil not object of operator or packed procedure \" +\n    \"program record reintroduce repeat self set shl shr string then to type \" +\n    \"unit until uses var while with xor as class dispinterface except exports \" +\n    \"finalization finally initialization inline is library on out packed \" +\n    \"property raise resourcestring threadvar try absolute abstract alias \" +\n    \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" +\n    \"dynamic enumerator experimental export external far far16 forward generic \" +\n    \"helper implements index interrupt iocheck local message name near \" +\n    \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" +\n    \"pascal platform private protected public published read register \" +\n    \"reintroduce result safecall saveregisters softfloat specialize static \" +\n    \"stdcall stored strict unaligned unimplemented varargs virtual write\");\nvar atoms = {\"null\": true};\n\nvar isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == \"#\" && state.startOfLine) {\n    stream.skipToEnd();\n    return \"meta\";\n  }\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (ch == \"(\" && stream.eat(\"*\")) {\n    state.tokenize = tokenComment;\n    return tokenComment(stream, state);\n  }\n  if (ch == \"{\") {\n    state.tokenize = tokenCommentBraces;\n    return tokenCommentBraces(stream, state);\n  }\n  if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {end = true; break;}\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \")\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenCommentBraces(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"}\") {\n      state.tokenize = null;\n      break;\n    }\n  }\n  return \"comment\";\n}\n\n// Interface\n\nexport const pascal = {\n  name: \"pascal\",\n\n  startState: function() {\n    return {tokenize: null};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    return style;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {block: {open: \"(*\", close: \"*)\"}}\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}