{"ast":null,"code":"import { parser } from '@lezer/lezer';\nimport { LRLanguage, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA language provider based on the [Lezer Lezer\nparser](https://github.com/lezer-parser/lezer-grammar), extended\nwith highlighting and indentation information.\n*/\nconst lezerLanguage = /*@__PURE__*/LRLanguage.define({\n  name: \"lezer\",\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/foldNodeProp.add({\n      \"Body TokensBody SkipBody PrecedenceBody\": foldInside\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      },\n      line: \"//\"\n    },\n    indentOnInput: /^\\s*\\}$/\n  }\n});\n/**\nLanguage support for Lezer grammars.\n*/\nfunction lezer() {\n  return new LanguageSupport(lezerLanguage);\n}\nexport { lezer, lezerLanguage };","map":{"version":3,"names":["parser","LRLanguage","foldNodeProp","foldInside","LanguageSupport","lezerLanguage","define","name","configure","props","add","languageData","commentTokens","block","open","close","line","indentOnInput","lezer"],"sources":["/Users/EL-CAPITAN-2016/Development/mentor/client/node_modules/@codemirror/lang-lezer/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/lezer';\nimport { LRLanguage, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA language provider based on the [Lezer Lezer\nparser](https://github.com/lezer-parser/lezer-grammar), extended\nwith highlighting and indentation information.\n*/\nconst lezerLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"lezer\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/foldNodeProp.add({\n                \"Body TokensBody SkipBody PrecedenceBody\": foldInside\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { block: { open: \"/*\", close: \"*/\" }, line: \"//\" },\n        indentOnInput: /^\\s*\\}$/\n    }\n});\n/**\nLanguage support for Lezer grammars.\n*/\nfunction lezer() {\n    return new LanguageSupport(lezerLanguage);\n}\n\nexport { lezer, lezerLanguage };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,cAAc;AACrC,SAASC,UAAU,EAAEC,YAAY,EAAEC,UAAU,EAAEC,eAAe,QAAQ,sBAAsB;;AAE5F;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,aAAaJ,UAAU,CAACK,MAAM,CAAC;EACjDC,IAAI,EAAE,OAAO;EACbP,MAAM,EAAE,aAAaA,MAAM,CAACQ,SAAS,CAAC;IAClCC,KAAK,EAAE,CACH,aAAaP,YAAY,CAACQ,GAAG,CAAC;MAC1B,yCAAyC,EAAEP;IAC/C,CAAC,CAAC;EAEV,CAAC,CAAC;EACFQ,YAAY,EAAE;IACVC,aAAa,EAAE;MAAEC,KAAK,EAAE;QAAEC,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC;MAAEC,IAAI,EAAE;IAAK,CAAC;IACjEC,aAAa,EAAE;EACnB;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA,SAASC,KAAKA,CAAA,EAAG;EACb,OAAO,IAAId,eAAe,CAACC,aAAa,CAAC;AAC7C;AAEA,SAASa,KAAK,EAAEb,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}