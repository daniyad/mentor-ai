{"ast":null,"code":"import { parser } from '@lezer/php';\nimport { parseMixed } from '@lezer/common';\nimport { html } from '@codemirror/lang-html';\nimport { LRLanguage, indentNodeProp, continuedIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA language provider based on the [Lezer PHP\nparser](https://github.com/lezer-parser/php), extended with\nhighlighting and indentation information.\n*/\nconst phpLanguage = /*@__PURE__*/LRLanguage.define({\n  name: \"php\",\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b|elseif\\b|endif\\b)/\n      }),\n      TryStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|catch\\b|finally\\b)/\n      }),\n      SwitchBody: context => {\n        let after = context.textAfter,\n          closed = /^\\s*\\}/.test(after),\n          isCase = /^\\s*(case|default)\\b/.test(after);\n        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n      },\n      ColonBlock: cx => cx.baseIndent + cx.unit,\n      \"Block EnumBody DeclarationList\": /*@__PURE__*/delimitedIndent({\n        closing: \"}\"\n      }),\n      ArrowFunction: cx => cx.baseIndent + cx.unit,\n      \"String BlockComment\": () => null,\n      Statement: /*@__PURE__*/continuedIndent({\n        except: /^({|end(for|foreach|switch|while)\\b)/\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      \"Block EnumBody DeclarationList SwitchBody ArrayExpression ValueList\": foldInside,\n      ColonBlock(tree) {\n        return {\n          from: tree.from + 1,\n          to: tree.to\n        };\n      },\n      BlockComment(tree) {\n        return {\n          from: tree.from + 2,\n          to: tree.to - 2\n        };\n      }\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      },\n      line: \"//\"\n    },\n    indentOnInput: /^\\s*(?:case |default:|end(?:if|for(?:each)?|switch|while)|else(?:if)?|\\{|\\})$/,\n    wordChars: \"$\",\n    closeBrackets: {\n      stringPrefixes: [\"b\", \"B\"]\n    }\n  }\n});\n/**\nPHP language support.\n*/\nfunction php() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let support = [],\n    base;\n  if (config.baseLanguage === null) ;else if (config.baseLanguage) {\n    base = config.baseLanguage;\n  } else {\n    let htmlSupport = html({\n      matchClosingTags: false\n    });\n    support.push(htmlSupport.support);\n    base = htmlSupport.language;\n  }\n  return new LanguageSupport(phpLanguage.configure({\n    wrap: base && parseMixed(node => {\n      if (!node.type.isTop) return null;\n      return {\n        parser: base.parser,\n        overlay: node => node.name == \"Text\"\n      };\n    }),\n    top: config.plain ? \"Program\" : \"Template\"\n  }), support);\n}\nexport { php, phpLanguage };","map":{"version":3,"names":["parser","parseMixed","html","LRLanguage","indentNodeProp","continuedIndent","delimitedIndent","foldNodeProp","foldInside","LanguageSupport","phpLanguage","define","name","configure","props","add","IfStatement","except","TryStatement","SwitchBody","context","after","textAfter","closed","test","isCase","baseIndent","unit","ColonBlock","cx","closing","ArrowFunction","String BlockComment","Statement","tree","from","to","BlockComment","languageData","commentTokens","block","open","close","line","indentOnInput","wordChars","closeBrackets","stringPrefixes","php","config","arguments","length","undefined","support","base","baseLanguage","htmlSupport","matchClosingTags","push","language","wrap","node","type","isTop","overlay","top","plain"],"sources":["/Users/EL-CAPITAN-2016/Development/mentor/client/node_modules/@codemirror/lang-php/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/php';\nimport { parseMixed } from '@lezer/common';\nimport { html } from '@codemirror/lang-html';\nimport { LRLanguage, indentNodeProp, continuedIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA language provider based on the [Lezer PHP\nparser](https://github.com/lezer-parser/php), extended with\nhighlighting and indentation information.\n*/\nconst phpLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"php\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b|elseif\\b|endif\\b)/ }),\n                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|catch\\b|finally\\b)/ }),\n                SwitchBody: context => {\n                    let after = context.textAfter, closed = /^\\s*\\}/.test(after), isCase = /^\\s*(case|default)\\b/.test(after);\n                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n                },\n                ColonBlock: cx => cx.baseIndent + cx.unit,\n                \"Block EnumBody DeclarationList\": /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                ArrowFunction: cx => cx.baseIndent + cx.unit,\n                \"String BlockComment\": () => null,\n                Statement: /*@__PURE__*/continuedIndent({ except: /^({|end(for|foreach|switch|while)\\b)/ })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"Block EnumBody DeclarationList SwitchBody ArrayExpression ValueList\": foldInside,\n                ColonBlock(tree) { return { from: tree.from + 1, to: tree.to }; },\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { block: { open: \"/*\", close: \"*/\" }, line: \"//\" },\n        indentOnInput: /^\\s*(?:case |default:|end(?:if|for(?:each)?|switch|while)|else(?:if)?|\\{|\\})$/,\n        wordChars: \"$\",\n        closeBrackets: { stringPrefixes: [\"b\", \"B\"] }\n    }\n});\n/**\nPHP language support.\n*/\nfunction php(config = {}) {\n    let support = [], base;\n    if (config.baseLanguage === null) ;\n    else if (config.baseLanguage) {\n        base = config.baseLanguage;\n    }\n    else {\n        let htmlSupport = html({ matchClosingTags: false });\n        support.push(htmlSupport.support);\n        base = htmlSupport.language;\n    }\n    return new LanguageSupport(phpLanguage.configure({\n        wrap: base && parseMixed(node => {\n            if (!node.type.isTop)\n                return null;\n            return {\n                parser: base.parser,\n                overlay: node => node.name == \"Text\"\n            };\n        }),\n        top: config.plain ? \"Program\" : \"Template\"\n    }), support);\n}\n\nexport { php, phpLanguage };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}