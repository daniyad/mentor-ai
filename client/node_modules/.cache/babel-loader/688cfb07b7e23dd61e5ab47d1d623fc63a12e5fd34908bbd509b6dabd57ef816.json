{"ast":null,"code":"import { ExternalTokenizer, LRParser } from '@lezer/lr';\nimport { LRLanguage, indentNodeProp, delimitedIndent, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@lezer/highlight';\nimport { snippetCompletion, ifNotIn, completeFromList } from '@codemirror/autocomplete';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst strContent = 63,\n  strDollarBrace = 64,\n  strEnd = 65,\n  escapeSequence = 66,\n  indStrContent = 67,\n  indStrDollarBrace = 68,\n  indStrEnd = 69,\n  indEscapeSequence = 70;\nconst quote = 34,\n  backslack = 92,\n  braceL = 123,\n  dollar = 36,\n  apostrophe = 39;\nconst scanString = /*@__PURE__*/new ExternalTokenizer(input => {\n  for (let afterDollar = false, i = 0;; i++) {\n    let {\n      next\n    } = input;\n    if (next < 0) {\n      if (i > 0) input.acceptToken(strContent);\n      break;\n    } else if (next === quote) {\n      if (i > 0) input.acceptToken(strContent);else input.acceptToken(strEnd, 1);\n      break;\n    } else if (next === braceL && afterDollar) {\n      if (i == 1) input.acceptToken(strDollarBrace, 1);else input.acceptToken(strContent, -1);\n      break;\n    } else if (next === backslack) {\n      input.advance();\n      input.acceptToken(escapeSequence, 1);\n    }\n    afterDollar = next === dollar;\n    input.advance();\n  }\n});\nconst scanIndString = /*@__PURE__*/new ExternalTokenizer(input => {\n  for (let afterDollar = false, afterApostrophe = false, i = 0;; i++) {\n    let {\n      next\n    } = input;\n    if (next < 0) {\n      if (i > 0) input.acceptToken(indStrContent);\n      break;\n    } else if (next === apostrophe && afterApostrophe) {\n      if (i > 1) input.acceptToken(indStrContent, -1);else input.acceptToken(indStrEnd, 1);\n      break;\n    } else if (next === braceL && afterDollar) {\n      if (i == 1) input.acceptToken(indStrDollarBrace, 1);else input.acceptToken(indStrContent, -1);\n      break;\n    } else if (next === backslack) {\n      input.advance();\n      input.acceptToken(indEscapeSequence, 1);\n    }\n    afterDollar = next === dollar;\n    afterApostrophe = next === apostrophe;\n    input.advance();\n  }\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_Identifier = {\n  __proto__: null,\n  assert: 22,\n  with: 26,\n  let: 30,\n  inherit: 42,\n  in: 48,\n  if: 52,\n  then: 54,\n  else: 56,\n  builtins: 70,\n  null: 214,\n  true: 216,\n  false: 216,\n  rec: 100,\n  or: 108\n};\nconst parser$1 = /*@__PURE__*/LRParser.deserialize({\n  version: 14,\n  states: \"7QO]QSOOO!sQWO'#DyO#XQ`O'#EjO&QQSO'#C`O&YQTO'#CnO'lQWO'#EWO(VQSO'#C|O(VQSO'#C|OOQO'#DQ'#DQOOQO'#DT'#DTO)dQUO'#DUO*yQSO'#DcOOQO'#Ej'#EjO,XQ`O'#EiOOQO'#Ei'#EiO-wQ`O'#EXOOQO'#Eh'#EhOOQO'#EX'#EXOOQO'#EW'#EWOOQO'#Dw'#DwO]QSO'#CfO]QSO'#ChO/dQSO'#D^O]QSO'#CuO]QSO'#D[O/xQSO'#D_QOQSOOO/}QSO'#CdO0`Q`O,5:eO3XQSO,5:eO3aQSO,5:eO4sQSO'#EOOOQO'#Cm'#CmOOQO'#Df'#DfO4}QSO,59wO]QSO'#CpO5`QSO'#ClO5eQSO'#EUO]QSO,58zO5sQSO,58zO5xQSO,58zOOQP'#EQ'#EQOOQP'#Dg'#DgO5}QTO,59YOOQO,59Y,59YO]QSO'#CoO6]QSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO6|QWO,59hO8VQSO'#D]O/xQSO'#D^OOQO,59h,59hOOQQ'#En'#EnOOQQ'#Dj'#DjO8hQUO,59pOOQO,59p,59pO]QSO'#DVOOQO'#Dk'#DkO8vQSO,59}OOQO,59},59}O8}QSO'#EiO6]QSO,59jOOQO,59i,59iO9XQSO,59QO9^QSO,59SO9cQSO,59UO]QSO,59UOOQO,59x,59xO9tQSO,59aO9yQSO,59vOOQO,59y,59yO:OQSO'#DhO;hQSO,5:jO]QSO,59OO;rQWO1G0PO;zQSO1G0POOQO1G0P1G0POOQO-E7d-E7dOOQO1G/c1G/cO<SQSO,59[O]QSO,59WOOQO'#Di'#DiO<XQSO,5:pO]QSO,5:qOOQO1G.f1G.fO<gQWO'#DyO<rQSO1G.fOOQP-E7e-E7eOOQO1G.t1G.tO<wQSO,59ZO<|Q`O'#EOOOQO1G/P1G/PO@PQWO1G/PO@WQWO1G/POAuQWO1G/POA|QWO1G/POBTQWO1G/POC^QWO1G/PODgQWO1G/POEpQWO1G/POFyQWO1G/POHSQWO1G/POI]QWO1G/POJfQWO1G/POKoQWO1G/POOQO,59w,59wOOQQ-E7h-E7hOOQO1G/[1G/[OLYQSO,59qOOQO-E7i-E7iOOQO1G/i1G/iOMfQ`O1G/UO]QSO1G.lO]QSO1G.nO]QSO1G.pOOQO1G.p1G.pO]QSO1G.{OOQO1G/b1G/bOOQO,5:S,5:SOOQO-E7f-E7fOOQO1G.j1G.jO! UQSO'#CdOOQO,5:P,5:PO! aQSO7+%kO! fQWO7+%kOOQO-E7c-E7cOOQO7+%k7+%kOOQO1G.v1G.vO! nQSO1G.rOOQO-E7g-E7gOOQO1G0[1G0[O! sQSO1G0]OOQO,5:e,5:eO]QSO7+$QOOQP1G.u1G.uO! xQ`O,5:jOOQQ1G/]1G/]O!#eQSO1G/UO)rQSO7+$pOOQO7+$W7+$WOOQO7+$Y7+$YOOQO7+$[7+$[O!#oQSO7+$gOOQO<<IV<<IVO!#tQSO<<IVP!#yQSO'#DeOOQO7+$^7+$^O!$OQSO7+%wOOQO<<Gl<<GlOOQO<<H[<<H[O]QSO<<HROOQOAN>qAN>qO!$ZQSO<<IcOOQOAN=mAN=mOOQOAN>}AN>}O!$iQSO,59jO)rQSO7+$p\",\n  stateData: \"!$x~O!jOSPOSQOS~OTQOUPOZdO]eO_fOfhOjgOs[Ou[Ov[Oz[O{[O|[O}[O!SiO!UZO!sSO#QVO#ZUO#_WO#`XO#aYO~OTkOVlOXnOeuO!sSO!usO~O!lvO!pwOT#^XU#^X_#^Xf#^Xn#^Xo#^Xs#^Xu#^Xv#^Xz#^X{#^X|#^X}#^X!S#^X!U#^X!`#^X!n#^X!s#^X!v#^X!|#^X!}#^X#O#^X#P#^X#Q#^X#R#^X#S#^X#T#^X#U#^X#V#^X#W#^X#X#^X#Y#^X#_#^X#`#^X#a#^X!q#^Xk#^Xg#^XV#^X!o#^Xl#^X~O!lvO!pxO~O!ayO!b}O!c|O!dyO~On!TOo!VO!n!OO!|!PO!}!PO#O!QO#P!RO#Q!SO#R!TO#S!UO#T!WO#U!XO#V!YO#W!ZO#X![O#Y!]O~O!`!zX!q!zXk!zXg!zXV!zX!o!zXl!zX~P&hOT[OU!_O_!`OfhOs[Ou[Ov[Oz[O{[O|[O}[O!SiO!UZO!sSO#QVO#ZUO#_WO#`XO#aYO~O!e!bO!f!fO!g!eO!h!bO~OT[OU!_O_!`OfhOs[Ou[Ov[Oz[O{[O|[O}[O!SiO!UZO!sSO#_WO#`XO#aYO~O!T!iO~P)rOT#]XU#]X_#]Xf#]Xs#]Xu#]Xv#]Xz#]X{#]X|#]X}#]X!S#]X!U#]X!s#]X#_#]X#`#]X#a#]X~O!v!kOn#]Xo#]X!`#]X!n#]X!|#]X!}#]X#O#]X#P#]X#Q#]X#R#]X#S#]X#T#]X#U#]X#V#]X#W#]X#X#]X#Y#]X!q#]Xk#]Xg#]XV#]X!o#]Xl#]X~P+QOn!{Xo!{X!`!{X!n!{X!|!{X!}!{X#O!{X#P!{X#Q!{X#R!{X#S!{X#T!{X#U!{X#V!{X#W!{X#X!{X#Y!{X!q!{Xk!{Xg!{XV!{X!o!{Xl!{X~P)rOToOU!_OeuOh!pO!sSO!usO~OU!_O~O!n!wO!v!uOVWX!oWX!w!rX~OT!PaU!Pa_!Paf!Pan!Pao!Pas!Pau!Pav!Paz!Pa{!Pa|!Pa}!Pa!S!Pa!U!Pa!`!Pa!l!ma!n!Pa!p!ma!s!Pa!v!Pa!|!Pa!}!Pa#O!Pa#P!Pa#Q!Pa#R!Pa#S!Pa#T!Pa#U!Pa#V!Pa#W!Pa#X!Pa#Y!Pa#_!Pa#`!Pa#a!Pa!q!Pak!Pag!PaV!Pa!o!Pal!Pa~OV!zO!o!xO~OV!zO~O!v!uOT!rXU!rX_!rXf!rXs!rXu!rXv!rXz!rX{!rX|!rX}!rX!S!rX!U!rX!W!rX!s!rX#_!rX#`!rX#a!rX~O!w!rX!T!rX~P3fOToOV!|OeuO!sSO!usO~O!w#OO~OT#POf#RO!sSO!usO~OU#TO~OT#UO~O!ayO!b}O!c#WO!dyO~OT#YO!sSO!usO~O!n!OO!|!PO!}!PO#O!QO#P!RO#Q!SO~Onpaopa!`pa#Rpa#Spa#Tpa#Upa#Vpa#Wpa#Xpa#Ypa!qpakpagpaVpa!opalpa~P6hOToOV#iOeuO!sSO!usO~O!e!bO!f!fO!g#kO!h!bO~O!T#nO~P)rO!v$mO!T#]X~P+QO!q#pO~O!q#qO~OToOeuOh#rO!sSO!usO~Ok#tO~Og#uO~OT#vO!sSO!usO~O!v!uOT!raU!ra_!raf!ras!rau!rav!raz!ra{!ra|!ra}!ra!S!ra!U!ra!W!ra!s!ra#_!ra#`!ra#a!ra~O!w!ra!T!ra~P:ZOT#yOX#{O~OV$OO!o#|O~OV$PO~OT#PO!q$SO!sSO!usO~OT#yOV$UOXnO~O!l$VO~OV$WO~On!rXo!rX!`!rX!n!rX!|!rX!}!rX#O!rX#P!rX#Q!rX#R!rX#S!rX#T!rX#U!rX#V!rX#W!rX#X!rX#Y!rX!q!rXk!rXg!rXV!rX!o!rXl!rX~P3fO!n!OO!|!POnmiomi!`mi#Omi#Pmi#Qmi#Rmi#Smi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~O!}mi~P>iO!}!PO~P>iO!n!OO!|!PO!}!PO#O!QOnmiomi!`mi#Qmi#Rmi#Smi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~O#Pmi~P@_O#P!RO~P@_O#R!TOnmiomi!`mi#Smi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TO#R!TOomi!`mi#Smi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TO#R!TO#S!UOomi!`mi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO!`mi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO#T!WO!`mi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO#T!WO#U!XO!`mi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO#T!WO#U!XO#V!YO!`mi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO#T!WO#U!XO#V!YO#W!ZO!`mi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hO!`mi!qmikmigmiVmi!omilmi~P&hOV$YO~OTriUri_rifrisriurivrizri{ri|ri}ri!Sri!Uri!sri#_ri#`ri#ari~O!W$[Onriori!`ri!nri!|ri!}ri#Ori#Pri#Qri#Rri#Sri#Tri#Uri#Vri#Wri#Xri#Yri!qrikrigriVri!orilri~PL_O!n!wOVWX!oWX~OV$aO~OT#yOX$bO~O!q$dO~Og$eO~On!rao!ra!`!ra!n!ra!|!ra!}!ra#O!ra#P!ra#Q!ra#R!ra#S!ra#T!ra#U!ra#V!ra#W!ra#X!ra#Y!ra!q!rak!rag!raV!ra!o!ral!ra~P:ZO!W$nO!Tri~PL_Ol$hO~OV$iO~OT#yO~OT#PO!sSO!usO~OT#PO!q$lO!sSO!usO~OToO!sSO!usO~Oz!v!v~\",\n  goto: \"2g#cPPPP#dPPP#yP#dP#dP#dP$S$Z$k%{%fPPPP&PPPP&fPP&f'[(QP({PP({({)vPPPP({)z({({PPP({P*|+S+_+e+p+z,QPPPPPPPPPPP,WP-cPPPP-{P.VPPP$S$S#d.ZPPPPPPPPPPPPPP/o0e1fPPP2cwcOdeghsv}!f!p!w#O#R#p#q#r#t$V$hSmP#TV#z!x#|$cZqPfr!_!oYtPfr!_!oQ#Z!OQ#o!kR$Z$m!p[OUVZ_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!h!p!w#O#R#p#q#r#t$V$[$h$n[oPfr!_!o$mW#Pu#Q$e$jS#Y!O!kR#v!uTyS{wbOdeghsv}!f!p!w#O#R#p#q#r#t$V$h!gaOUVdeghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$h!g`OUVdeghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$h!q^OUVZ_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!h!p!w#O#R#p#q#r#t$V$[$h$n!q[OUVZ_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!h!p!w#O#R#p#q#r#t$V$[$h$nT!bY!d!p[OUVZ_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!h!p!w#O#R#p#q#r#t$V$[$h$nS!qf!`R!tiQ!ymR#}!ySrP!_Q!ofT!{r!oQ{SR#V{S!vkoS#w!v$XR$X#YQ#QuS$R#Q$jR$j$eQ!dYR#j!dQ!hZR#m!hQjOQ!mdQ!neQ!rgQ!shQ!}sQ#SvQ#X}Q#l!fQ#s!pQ#x!wQ$Q#OQ$T#RQ$]#pQ$^#qQ$_#rQ$`#tQ$f$VR$k$hvROdeghsv}!f!p!w#O#R#p#q#r#t$V$hR#UwapPfr!O!_!k!o$mTzS{vTOdeghsv}!f!p!w#O#R#p#q#r#t$V$hQ!^UQ!aVQ#[!PQ#]!QQ#^!RQ#_!SQ#`!TQ#a!UQ#b!VQ#c!WQ#d!XQ#e!YQ#f!ZQ#g![R#h!]!g_OUVdeghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$h!f`OUVdeghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$hS!gZ!hQ!l_T$g$[$n!j]OUV_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$[$hV!jZ!h$nT!cY!d\",\n  nodeNames: \"âš  LineComment BlockComment Program Function Identifier { } Formal Ellipses Assert assert With with Let let Bind AttrPath String Interpolation Interpolation inherit ( ) in IfExpr if then else BinaryExpr < > UnaryExpr App Select builtins Null Integer Float Boolean IndentedString Interpolation Path HPath SPath URI Parenthesized AttrSet LetAttrSet RecAttrSet rec ] [ List or\",\n  maxTerm: 110,\n  nodeProps: [[\"closedBy\", 6, \"}\", 22, \")\", 52, \"]\"], [\"openedBy\", 7, \"{\", 23, \"(\", 51, \"[\"]],\n  skippedNodes: [0, 1, 2],\n  repeatNodeCount: 7,\n  tokenData: \">P~RtXY#cYZ#c]^#cpq#cqr#trs$Rst$Wtu$ovw$zwx%Vxy%byz%gz{%l{|%q|})]}!O)b!O!P*X!P!Q.r!Q!R0l!R![2e![!]3S!]!^3X!^!_3^!_!`5_!`!a5l!a!b5y!b!c6O!c!}6T!}#O;g#P#Q;l#R#S:u#T#o6T#o#p;q#p#q;v#q#r<R#r#s<W~#hS!j~XY#cYZ#c]^#cpq#cV#yP#ZP!_!`#|U$RO#VU~$WO!s~~$]SP~OY$WZ;'S$W;'S;=`$i<%lO$W~$lP;=`<%l$W~$rP#o#p$u~$zO!u~~$}Pvw%Q~%VO#W~~%YPwx%]~%bO#a~~%gOf~~%lOg~~%qO!}~~%vW#P~{|&`}!O&}!O!P&}!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}~&eW!|~{|&}}!O&}!O!P&}!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}T'QW{|&}}!O&}!O!P&}!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}T'mV{|(S}!O(S!O!P(S!Q![(S!c!}(S#R#S(S#T#o(ST(XWzT{|(S}!O(S!O!P(S!P!Q(q!Q![(S!c!}(S#R#S(S#T#o(ST(vVzT{|(S}!O(S!O!P(S!Q![(S!c!}(S#R#S(S#T#o(S~)bO!o~~)gX#Q~{|&}}!O&}!O!P&}!P!Q'j!Q![&}!`!a*S!c!}&}#R#S&}#T#o&}~*XO#Y~~*^W!vT{|&}}!O&}!O!P*v!P!Q'j!Q![,Q!c!}&}#R#S&}#T#o&}V*yW{|&}}!O&}!O!P+c!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}V+hWXQ{|&}}!O&}!O!P&}!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}~,V[v~{|&}}!O&}!O!P&}!P!Q'j!Q![,Q!c!g&}!g!h,{!h!}&}#R#S&}#T#X&}#X#Y,{#Y#o&}~-OW{|-h}!O-h!O!P&}!P!Q'j!Q![.T!c!}&}#R#S&}#T#o&}~-kW{|&}}!O&}!O!P&}!P!Q'j!Q![.T!c!}&}#R#S&}#T#o&}~.YWv~{|&}}!O&}!O!P&}!P!Q'j!Q![.T!c!}&}#R#S&}#T#o&}~.wX#O~z{/d{|(S}!O(S!O!P(S!P!Q0g!Q![(S!c!}(S#R#S(S#T#o(S~/iTQ~Oz/dz{/x{;'S/d;'S;=`0a<%lO/d~/{TO!P/d!P!Q0[!Q;'S/d;'S;=`0a<%lO/d~0aOQ~~0dP;=`<%l/d~0lO#R~~0qWu~{|&}}!O&}!O!P1Z!P!Q'j!Q![1v!c!}&}#R#S&}#T#o&}~1^W{|&}}!O&}!O!P&}!P!Q'j!Q![,Q!c!}&}#R#S&}#T#o&}~1{Wu~{|&}}!O&}!O!P&}!P!Q'j!Q![1v!c!}&}#R#S&}#T#o&}~2jWu~{|&}}!O&}!O!P,Q!P!Q'j!Q![2e!c!}&}#R#S&}#T#o&}~3XO!l~~3^O!q~~3cWn~{|3{}!O3{!O!P3{!Q![3{!_!`5Y!c!}3{#R#S3{#T#o3{~4OX{|3{}!O3{!O!P3{!P!Q4k!Q![3{!`!a5T!c!}3{#R#S3{#T#o3{~4nV{|3{}!O3{!O!P3{!Q![3{!c!}3{#R#S3{#T#o3{~5YO|~~5_O#S~V5dP!wP!_!`5gU5lO#UU~5qPo~!_!`5t~5yO#T~~6OO!n~~6TO!p~~6YYT~wx6x{|7a}!O6T!O!P7a!P!Q'j!Q![6T![!]8P!c!}6T#R#S:u#T#o6T~6}UT~wx6x}!O6x!Q![6x!c!}6x#R#S6x#T#o6x~7dX{|7a}!O7a!O!P7a!P!Q'j!Q![7a![!]8P!c!}7a#R#S&}#T#o7a~8Sdqr9btu9buv9bvw9bwx9bz{9b{|9b|}9b}!O9b!O!P9b!P!Q9b!Q![9b![!]9b!_!`9b!a!b9b!b!c9b!c!}9b#R#S9b#T#o9b#r#s9b~9gd}~qr9btu9buv9bvw9bwx9bz{9b{|9b|}9b}!O9b!O!P9b!P!Q9b!Q![9b![!]9b!_!`9b!a!b9b!b!c9b!c!}9b#R#S9b#T#o9b#r#s9b~:zXT~wx6x{|&}}!O:u!O!P&}!P!Q'j!Q![:u!c!}:u#R#S:u#T#o:u~;lO!U~~;qO!T~~;vOU~~;yP#p#q;|~<RO#X~~<WOV~~<ZP!P!Q<^~<aV{|<v}!O<v!O!P<v!Q![<v!c!}<v#R#S<v#T#o<v~<{W{~{|<v}!O<v!O!P<v!P!Q=e!Q![<v!c!}<v#R#S<v#T#o<v~=jV{~{|<v}!O<v!O!P<v!Q![<v!c!}<v#R#S<v#T#o<v\",\n  tokenizers: [scanString, scanIndString, 0, 1, 2],\n  topRules: {\n    \"Program\": [0, 3]\n  },\n  specialized: [{\n    term: 5,\n    get: value => spec_Identifier[value] || -1\n  }],\n  tokenPrec: 2290\n});\nconst parser = parser$1;\nconst nixLanguage = /*@__PURE__*/LRLanguage.define({\n  name: 'Nix',\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      Parenthesized: /*@__PURE__*/delimitedIndent({\n        closing: \")\"\n      }),\n      AttrSet: /*@__PURE__*/delimitedIndent({\n        closing: \"}\"\n      }),\n      List: /*@__PURE__*/delimitedIndent({\n        closing: \"]\"\n      }),\n      Let: /*@__PURE__*/continuedIndent({\n        except: /^\\s*in\\b/\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      AttrSet: foldInside,\n      List: foldInside,\n      Let(node) {\n        let first = node.getChild(\"let\"),\n          last = node.getChild(\"in\");\n        if (!first || !last) return null;\n        return {\n          from: first.to,\n          to: last.from\n        };\n      }\n    }), /*@__PURE__*/styleTags({\n      Identifier: tags.propertyName,\n      Boolean: tags.bool,\n      String: tags.string,\n      IndentedString: tags.string,\n      LineComment: tags.lineComment,\n      BlockComment: tags.blockComment,\n      Float: tags.float,\n      Integer: tags.integer,\n      Null: tags.null,\n      URI: tags.url,\n      SPath: tags.literal,\n      Path: tags.literal,\n      \"( )\": tags.paren,\n      \"{ }\": tags.brace,\n      \"[ ]\": tags.squareBracket,\n      \"if then else\": tags.controlKeyword,\n      \"import with let in rec builtins inherit assert or\": tags.keyword\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      line: \"#\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", \"''\", '\"']\n    },\n    indentOnInput: /^\\s*(in|\\}|\\)|\\])$/\n  }\n});\nconst snippets = [/*@__PURE__*/snippetCompletion(\"let ${binds} in ${expression}\", {\n  label: \"let\",\n  detail: \"Let ... in statement\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"with ${expression}; ${expression}\", {\n  label: \"with\",\n  detail: \"With statement\",\n  type: \"keyword\"\n})];\nfunction nix() {\n  return new LanguageSupport(nixLanguage, nixLanguage.data.of({\n    autocomplete: ifNotIn([\"LineComment\", \"BlockComment\", \"String\", \"IndentedString\"], completeFromList(snippets))\n  }));\n}\nexport { nix, nixLanguage, parser };","map":{"version":3,"names":["ExternalTokenizer","LRParser","LRLanguage","indentNodeProp","delimitedIndent","continuedIndent","foldNodeProp","foldInside","LanguageSupport","styleTags","tags","snippetCompletion","ifNotIn","completeFromList","strContent","strDollarBrace","strEnd","escapeSequence","indStrContent","indStrDollarBrace","indStrEnd","indEscapeSequence","quote","backslack","braceL","dollar","apostrophe","scanString","input","afterDollar","i","next","acceptToken","advance","scanIndString","afterApostrophe","spec_Identifier","__proto__","assert","with","let","inherit","in","if","then","else","builtins","null","true","false","rec","or","parser$1","deserialize","version","states","stateData","goto","nodeNames","maxTerm","nodeProps","skippedNodes","repeatNodeCount","tokenData","tokenizers","topRules","specialized","term","get","value","tokenPrec","parser","nixLanguage","define","name","configure","props","add","Parenthesized","closing","AttrSet","List","Let","except","node","first","getChild","last","from","to","Identifier","propertyName","Boolean","bool","String","string","IndentedString","LineComment","lineComment","BlockComment","blockComment","Float","float","Integer","integer","Null","URI","url","SPath","literal","Path","paren","brace","squareBracket","controlKeyword","keyword","languageData","commentTokens","line","block","open","close","closeBrackets","brackets","indentOnInput","snippets","label","detail","type","nix","data","of","autocomplete"],"sources":["/Users/EL-CAPITAN-2016/Development/mentor/client/node_modules/@replit/codemirror-lang-nix/dist/index.js"],"sourcesContent":["import { ExternalTokenizer, LRParser } from '@lezer/lr';\nimport { LRLanguage, indentNodeProp, delimitedIndent, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@lezer/highlight';\nimport { snippetCompletion, ifNotIn, completeFromList } from '@codemirror/autocomplete';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst strContent = 63,\n  strDollarBrace = 64,\n  strEnd = 65,\n  escapeSequence = 66,\n  indStrContent = 67,\n  indStrDollarBrace = 68,\n  indStrEnd = 69,\n  indEscapeSequence = 70;\n\nconst quote = 34, backslack = 92, braceL = 123, dollar = 36, apostrophe = 39;\nconst scanString = /*@__PURE__*/new ExternalTokenizer((input) => {\n    for (let afterDollar = false, i = 0;; i++) {\n        let { next } = input;\n        if (next < 0) {\n            if (i > 0)\n                input.acceptToken(strContent);\n            break;\n        }\n        else if (next === quote) {\n            if (i > 0)\n                input.acceptToken(strContent);\n            else\n                input.acceptToken(strEnd, 1);\n            break;\n        }\n        else if (next === braceL && afterDollar) {\n            if (i == 1)\n                input.acceptToken(strDollarBrace, 1);\n            else\n                input.acceptToken(strContent, -1);\n            break;\n        }\n        else if (next === backslack) {\n            input.advance();\n            input.acceptToken(escapeSequence, 1);\n        }\n        afterDollar = next === dollar;\n        input.advance();\n    }\n});\nconst scanIndString = /*@__PURE__*/new ExternalTokenizer((input) => {\n    for (let afterDollar = false, afterApostrophe = false, i = 0;; i++) {\n        let { next } = input;\n        if (next < 0) {\n            if (i > 0)\n                input.acceptToken(indStrContent);\n            break;\n        }\n        else if (next === apostrophe && afterApostrophe) {\n            if (i > 1)\n                input.acceptToken(indStrContent, -1);\n            else\n                input.acceptToken(indStrEnd, 1);\n            break;\n        }\n        else if (next === braceL && afterDollar) {\n            if (i == 1)\n                input.acceptToken(indStrDollarBrace, 1);\n            else\n                input.acceptToken(indStrContent, -1);\n            break;\n        }\n        else if (next === backslack) {\n            input.advance();\n            input.acceptToken(indEscapeSequence, 1);\n        }\n        afterDollar = next === dollar;\n        afterApostrophe = next === apostrophe;\n        input.advance();\n    }\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_Identifier = {__proto__:null,assert:22, with:26, let:30, inherit:42, in:48, if:52, then:54, else:56, builtins:70, null:214, true:216, false:216, rec:100, or:108};\nconst parser$1 = /*@__PURE__*/LRParser.deserialize({\n  version: 14,\n  states: \"7QO]QSOOO!sQWO'#DyO#XQ`O'#EjO&QQSO'#C`O&YQTO'#CnO'lQWO'#EWO(VQSO'#C|O(VQSO'#C|OOQO'#DQ'#DQOOQO'#DT'#DTO)dQUO'#DUO*yQSO'#DcOOQO'#Ej'#EjO,XQ`O'#EiOOQO'#Ei'#EiO-wQ`O'#EXOOQO'#Eh'#EhOOQO'#EX'#EXOOQO'#EW'#EWOOQO'#Dw'#DwO]QSO'#CfO]QSO'#ChO/dQSO'#D^O]QSO'#CuO]QSO'#D[O/xQSO'#D_QOQSOOO/}QSO'#CdO0`Q`O,5:eO3XQSO,5:eO3aQSO,5:eO4sQSO'#EOOOQO'#Cm'#CmOOQO'#Df'#DfO4}QSO,59wO]QSO'#CpO5`QSO'#ClO5eQSO'#EUO]QSO,58zO5sQSO,58zO5xQSO,58zOOQP'#EQ'#EQOOQP'#Dg'#DgO5}QTO,59YOOQO,59Y,59YO]QSO'#CoO6]QSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO6|QWO,59hO8VQSO'#D]O/xQSO'#D^OOQO,59h,59hOOQQ'#En'#EnOOQQ'#Dj'#DjO8hQUO,59pOOQO,59p,59pO]QSO'#DVOOQO'#Dk'#DkO8vQSO,59}OOQO,59},59}O8}QSO'#EiO6]QSO,59jOOQO,59i,59iO9XQSO,59QO9^QSO,59SO9cQSO,59UO]QSO,59UOOQO,59x,59xO9tQSO,59aO9yQSO,59vOOQO,59y,59yO:OQSO'#DhO;hQSO,5:jO]QSO,59OO;rQWO1G0PO;zQSO1G0POOQO1G0P1G0POOQO-E7d-E7dOOQO1G/c1G/cO<SQSO,59[O]QSO,59WOOQO'#Di'#DiO<XQSO,5:pO]QSO,5:qOOQO1G.f1G.fO<gQWO'#DyO<rQSO1G.fOOQP-E7e-E7eOOQO1G.t1G.tO<wQSO,59ZO<|Q`O'#EOOOQO1G/P1G/PO@PQWO1G/PO@WQWO1G/POAuQWO1G/POA|QWO1G/POBTQWO1G/POC^QWO1G/PODgQWO1G/POEpQWO1G/POFyQWO1G/POHSQWO1G/POI]QWO1G/POJfQWO1G/POKoQWO1G/POOQO,59w,59wOOQQ-E7h-E7hOOQO1G/[1G/[OLYQSO,59qOOQO-E7i-E7iOOQO1G/i1G/iOMfQ`O1G/UO]QSO1G.lO]QSO1G.nO]QSO1G.pOOQO1G.p1G.pO]QSO1G.{OOQO1G/b1G/bOOQO,5:S,5:SOOQO-E7f-E7fOOQO1G.j1G.jO! UQSO'#CdOOQO,5:P,5:PO! aQSO7+%kO! fQWO7+%kOOQO-E7c-E7cOOQO7+%k7+%kOOQO1G.v1G.vO! nQSO1G.rOOQO-E7g-E7gOOQO1G0[1G0[O! sQSO1G0]OOQO,5:e,5:eO]QSO7+$QOOQP1G.u1G.uO! xQ`O,5:jOOQQ1G/]1G/]O!#eQSO1G/UO)rQSO7+$pOOQO7+$W7+$WOOQO7+$Y7+$YOOQO7+$[7+$[O!#oQSO7+$gOOQO<<IV<<IVO!#tQSO<<IVP!#yQSO'#DeOOQO7+$^7+$^O!$OQSO7+%wOOQO<<Gl<<GlOOQO<<H[<<H[O]QSO<<HROOQOAN>qAN>qO!$ZQSO<<IcOOQOAN=mAN=mOOQOAN>}AN>}O!$iQSO,59jO)rQSO7+$p\",\n  stateData: \"!$x~O!jOSPOSQOS~OTQOUPOZdO]eO_fOfhOjgOs[Ou[Ov[Oz[O{[O|[O}[O!SiO!UZO!sSO#QVO#ZUO#_WO#`XO#aYO~OTkOVlOXnOeuO!sSO!usO~O!lvO!pwOT#^XU#^X_#^Xf#^Xn#^Xo#^Xs#^Xu#^Xv#^Xz#^X{#^X|#^X}#^X!S#^X!U#^X!`#^X!n#^X!s#^X!v#^X!|#^X!}#^X#O#^X#P#^X#Q#^X#R#^X#S#^X#T#^X#U#^X#V#^X#W#^X#X#^X#Y#^X#_#^X#`#^X#a#^X!q#^Xk#^Xg#^XV#^X!o#^Xl#^X~O!lvO!pxO~O!ayO!b}O!c|O!dyO~On!TOo!VO!n!OO!|!PO!}!PO#O!QO#P!RO#Q!SO#R!TO#S!UO#T!WO#U!XO#V!YO#W!ZO#X![O#Y!]O~O!`!zX!q!zXk!zXg!zXV!zX!o!zXl!zX~P&hOT[OU!_O_!`OfhOs[Ou[Ov[Oz[O{[O|[O}[O!SiO!UZO!sSO#QVO#ZUO#_WO#`XO#aYO~O!e!bO!f!fO!g!eO!h!bO~OT[OU!_O_!`OfhOs[Ou[Ov[Oz[O{[O|[O}[O!SiO!UZO!sSO#_WO#`XO#aYO~O!T!iO~P)rOT#]XU#]X_#]Xf#]Xs#]Xu#]Xv#]Xz#]X{#]X|#]X}#]X!S#]X!U#]X!s#]X#_#]X#`#]X#a#]X~O!v!kOn#]Xo#]X!`#]X!n#]X!|#]X!}#]X#O#]X#P#]X#Q#]X#R#]X#S#]X#T#]X#U#]X#V#]X#W#]X#X#]X#Y#]X!q#]Xk#]Xg#]XV#]X!o#]Xl#]X~P+QOn!{Xo!{X!`!{X!n!{X!|!{X!}!{X#O!{X#P!{X#Q!{X#R!{X#S!{X#T!{X#U!{X#V!{X#W!{X#X!{X#Y!{X!q!{Xk!{Xg!{XV!{X!o!{Xl!{X~P)rOToOU!_OeuOh!pO!sSO!usO~OU!_O~O!n!wO!v!uOVWX!oWX!w!rX~OT!PaU!Pa_!Paf!Pan!Pao!Pas!Pau!Pav!Paz!Pa{!Pa|!Pa}!Pa!S!Pa!U!Pa!`!Pa!l!ma!n!Pa!p!ma!s!Pa!v!Pa!|!Pa!}!Pa#O!Pa#P!Pa#Q!Pa#R!Pa#S!Pa#T!Pa#U!Pa#V!Pa#W!Pa#X!Pa#Y!Pa#_!Pa#`!Pa#a!Pa!q!Pak!Pag!PaV!Pa!o!Pal!Pa~OV!zO!o!xO~OV!zO~O!v!uOT!rXU!rX_!rXf!rXs!rXu!rXv!rXz!rX{!rX|!rX}!rX!S!rX!U!rX!W!rX!s!rX#_!rX#`!rX#a!rX~O!w!rX!T!rX~P3fOToOV!|OeuO!sSO!usO~O!w#OO~OT#POf#RO!sSO!usO~OU#TO~OT#UO~O!ayO!b}O!c#WO!dyO~OT#YO!sSO!usO~O!n!OO!|!PO!}!PO#O!QO#P!RO#Q!SO~Onpaopa!`pa#Rpa#Spa#Tpa#Upa#Vpa#Wpa#Xpa#Ypa!qpakpagpaVpa!opalpa~P6hOToOV#iOeuO!sSO!usO~O!e!bO!f!fO!g#kO!h!bO~O!T#nO~P)rO!v$mO!T#]X~P+QO!q#pO~O!q#qO~OToOeuOh#rO!sSO!usO~Ok#tO~Og#uO~OT#vO!sSO!usO~O!v!uOT!raU!ra_!raf!ras!rau!rav!raz!ra{!ra|!ra}!ra!S!ra!U!ra!W!ra!s!ra#_!ra#`!ra#a!ra~O!w!ra!T!ra~P:ZOT#yOX#{O~OV$OO!o#|O~OV$PO~OT#PO!q$SO!sSO!usO~OT#yOV$UOXnO~O!l$VO~OV$WO~On!rXo!rX!`!rX!n!rX!|!rX!}!rX#O!rX#P!rX#Q!rX#R!rX#S!rX#T!rX#U!rX#V!rX#W!rX#X!rX#Y!rX!q!rXk!rXg!rXV!rX!o!rXl!rX~P3fO!n!OO!|!POnmiomi!`mi#Omi#Pmi#Qmi#Rmi#Smi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~O!}mi~P>iO!}!PO~P>iO!n!OO!|!PO!}!PO#O!QOnmiomi!`mi#Qmi#Rmi#Smi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~O#Pmi~P@_O#P!RO~P@_O#R!TOnmiomi!`mi#Smi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TO#R!TOomi!`mi#Smi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TO#R!TO#S!UOomi!`mi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO!`mi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO#T!WO!`mi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO#T!WO#U!XO!`mi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO#T!WO#U!XO#V!YO!`mi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO#T!WO#U!XO#V!YO#W!ZO!`mi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hO!`mi!qmikmigmiVmi!omilmi~P&hOV$YO~OTriUri_rifrisriurivrizri{ri|ri}ri!Sri!Uri!sri#_ri#`ri#ari~O!W$[Onriori!`ri!nri!|ri!}ri#Ori#Pri#Qri#Rri#Sri#Tri#Uri#Vri#Wri#Xri#Yri!qrikrigriVri!orilri~PL_O!n!wOVWX!oWX~OV$aO~OT#yOX$bO~O!q$dO~Og$eO~On!rao!ra!`!ra!n!ra!|!ra!}!ra#O!ra#P!ra#Q!ra#R!ra#S!ra#T!ra#U!ra#V!ra#W!ra#X!ra#Y!ra!q!rak!rag!raV!ra!o!ral!ra~P:ZO!W$nO!Tri~PL_Ol$hO~OV$iO~OT#yO~OT#PO!sSO!usO~OT#PO!q$lO!sSO!usO~OToO!sSO!usO~Oz!v!v~\",\n  goto: \"2g#cPPPP#dPPP#yP#dP#dP#dP$S$Z$k%{%fPPPP&PPPP&fPP&f'[(QP({PP({({)vPPPP({)z({({PPP({P*|+S+_+e+p+z,QPPPPPPPPPPP,WP-cPPPP-{P.VPPP$S$S#d.ZPPPPPPPPPPPPPP/o0e1fPPP2cwcOdeghsv}!f!p!w#O#R#p#q#r#t$V$hSmP#TV#z!x#|$cZqPfr!_!oYtPfr!_!oQ#Z!OQ#o!kR$Z$m!p[OUVZ_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!h!p!w#O#R#p#q#r#t$V$[$h$n[oPfr!_!o$mW#Pu#Q$e$jS#Y!O!kR#v!uTyS{wbOdeghsv}!f!p!w#O#R#p#q#r#t$V$h!gaOUVdeghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$h!g`OUVdeghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$h!q^OUVZ_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!h!p!w#O#R#p#q#r#t$V$[$h$n!q[OUVZ_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!h!p!w#O#R#p#q#r#t$V$[$h$nT!bY!d!p[OUVZ_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!h!p!w#O#R#p#q#r#t$V$[$h$nS!qf!`R!tiQ!ymR#}!ySrP!_Q!ofT!{r!oQ{SR#V{S!vkoS#w!v$XR$X#YQ#QuS$R#Q$jR$j$eQ!dYR#j!dQ!hZR#m!hQjOQ!mdQ!neQ!rgQ!shQ!}sQ#SvQ#X}Q#l!fQ#s!pQ#x!wQ$Q#OQ$T#RQ$]#pQ$^#qQ$_#rQ$`#tQ$f$VR$k$hvROdeghsv}!f!p!w#O#R#p#q#r#t$V$hR#UwapPfr!O!_!k!o$mTzS{vTOdeghsv}!f!p!w#O#R#p#q#r#t$V$hQ!^UQ!aVQ#[!PQ#]!QQ#^!RQ#_!SQ#`!TQ#a!UQ#b!VQ#c!WQ#d!XQ#e!YQ#f!ZQ#g![R#h!]!g_OUVdeghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$h!f`OUVdeghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$hS!gZ!hQ!l_T$g$[$n!j]OUV_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$[$hV!jZ!h$nT!cY!d\",\n  nodeNames: \"âš  LineComment BlockComment Program Function Identifier { } Formal Ellipses Assert assert With with Let let Bind AttrPath String Interpolation Interpolation inherit ( ) in IfExpr if then else BinaryExpr < > UnaryExpr App Select builtins Null Integer Float Boolean IndentedString Interpolation Path HPath SPath URI Parenthesized AttrSet LetAttrSet RecAttrSet rec ] [ List or\",\n  maxTerm: 110,\n  nodeProps: [\n    [\"closedBy\", 6,\"}\",22,\")\",52,\"]\"],\n    [\"openedBy\", 7,\"{\",23,\"(\",51,\"[\"]\n  ],\n  skippedNodes: [0,1,2],\n  repeatNodeCount: 7,\n  tokenData: \">P~RtXY#cYZ#c]^#cpq#cqr#trs$Rst$Wtu$ovw$zwx%Vxy%byz%gz{%l{|%q|})]}!O)b!O!P*X!P!Q.r!Q!R0l!R![2e![!]3S!]!^3X!^!_3^!_!`5_!`!a5l!a!b5y!b!c6O!c!}6T!}#O;g#P#Q;l#R#S:u#T#o6T#o#p;q#p#q;v#q#r<R#r#s<W~#hS!j~XY#cYZ#c]^#cpq#cV#yP#ZP!_!`#|U$RO#VU~$WO!s~~$]SP~OY$WZ;'S$W;'S;=`$i<%lO$W~$lP;=`<%l$W~$rP#o#p$u~$zO!u~~$}Pvw%Q~%VO#W~~%YPwx%]~%bO#a~~%gOf~~%lOg~~%qO!}~~%vW#P~{|&`}!O&}!O!P&}!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}~&eW!|~{|&}}!O&}!O!P&}!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}T'QW{|&}}!O&}!O!P&}!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}T'mV{|(S}!O(S!O!P(S!Q![(S!c!}(S#R#S(S#T#o(ST(XWzT{|(S}!O(S!O!P(S!P!Q(q!Q![(S!c!}(S#R#S(S#T#o(ST(vVzT{|(S}!O(S!O!P(S!Q![(S!c!}(S#R#S(S#T#o(S~)bO!o~~)gX#Q~{|&}}!O&}!O!P&}!P!Q'j!Q![&}!`!a*S!c!}&}#R#S&}#T#o&}~*XO#Y~~*^W!vT{|&}}!O&}!O!P*v!P!Q'j!Q![,Q!c!}&}#R#S&}#T#o&}V*yW{|&}}!O&}!O!P+c!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}V+hWXQ{|&}}!O&}!O!P&}!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}~,V[v~{|&}}!O&}!O!P&}!P!Q'j!Q![,Q!c!g&}!g!h,{!h!}&}#R#S&}#T#X&}#X#Y,{#Y#o&}~-OW{|-h}!O-h!O!P&}!P!Q'j!Q![.T!c!}&}#R#S&}#T#o&}~-kW{|&}}!O&}!O!P&}!P!Q'j!Q![.T!c!}&}#R#S&}#T#o&}~.YWv~{|&}}!O&}!O!P&}!P!Q'j!Q![.T!c!}&}#R#S&}#T#o&}~.wX#O~z{/d{|(S}!O(S!O!P(S!P!Q0g!Q![(S!c!}(S#R#S(S#T#o(S~/iTQ~Oz/dz{/x{;'S/d;'S;=`0a<%lO/d~/{TO!P/d!P!Q0[!Q;'S/d;'S;=`0a<%lO/d~0aOQ~~0dP;=`<%l/d~0lO#R~~0qWu~{|&}}!O&}!O!P1Z!P!Q'j!Q![1v!c!}&}#R#S&}#T#o&}~1^W{|&}}!O&}!O!P&}!P!Q'j!Q![,Q!c!}&}#R#S&}#T#o&}~1{Wu~{|&}}!O&}!O!P&}!P!Q'j!Q![1v!c!}&}#R#S&}#T#o&}~2jWu~{|&}}!O&}!O!P,Q!P!Q'j!Q![2e!c!}&}#R#S&}#T#o&}~3XO!l~~3^O!q~~3cWn~{|3{}!O3{!O!P3{!Q![3{!_!`5Y!c!}3{#R#S3{#T#o3{~4OX{|3{}!O3{!O!P3{!P!Q4k!Q![3{!`!a5T!c!}3{#R#S3{#T#o3{~4nV{|3{}!O3{!O!P3{!Q![3{!c!}3{#R#S3{#T#o3{~5YO|~~5_O#S~V5dP!wP!_!`5gU5lO#UU~5qPo~!_!`5t~5yO#T~~6OO!n~~6TO!p~~6YYT~wx6x{|7a}!O6T!O!P7a!P!Q'j!Q![6T![!]8P!c!}6T#R#S:u#T#o6T~6}UT~wx6x}!O6x!Q![6x!c!}6x#R#S6x#T#o6x~7dX{|7a}!O7a!O!P7a!P!Q'j!Q![7a![!]8P!c!}7a#R#S&}#T#o7a~8Sdqr9btu9buv9bvw9bwx9bz{9b{|9b|}9b}!O9b!O!P9b!P!Q9b!Q![9b![!]9b!_!`9b!a!b9b!b!c9b!c!}9b#R#S9b#T#o9b#r#s9b~9gd}~qr9btu9buv9bvw9bwx9bz{9b{|9b|}9b}!O9b!O!P9b!P!Q9b!Q![9b![!]9b!_!`9b!a!b9b!b!c9b!c!}9b#R#S9b#T#o9b#r#s9b~:zXT~wx6x{|&}}!O:u!O!P&}!P!Q'j!Q![:u!c!}:u#R#S:u#T#o:u~;lO!U~~;qO!T~~;vOU~~;yP#p#q;|~<RO#X~~<WOV~~<ZP!P!Q<^~<aV{|<v}!O<v!O!P<v!Q![<v!c!}<v#R#S<v#T#o<v~<{W{~{|<v}!O<v!O!P<v!P!Q=e!Q![<v!c!}<v#R#S<v#T#o<v~=jV{~{|<v}!O<v!O!P<v!Q![<v!c!}<v#R#S<v#T#o<v\",\n  tokenizers: [scanString, scanIndString, 0, 1, 2],\n  topRules: {\"Program\":[0,3]},\n  specialized: [{term: 5, get: value => spec_Identifier[value] || -1}],\n  tokenPrec: 2290\n});\n\nconst parser = parser$1;\nconst nixLanguage = /*@__PURE__*/LRLanguage.define({\n    name: 'Nix',\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                Parenthesized: /*@__PURE__*/delimitedIndent({ closing: \")\" }),\n                AttrSet: /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                List: /*@__PURE__*/delimitedIndent({ closing: \"]\" }),\n                Let: /*@__PURE__*/continuedIndent({ except: /^\\s*in\\b/ }),\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                AttrSet: foldInside,\n                List: foldInside,\n                Let(node) {\n                    let first = node.getChild(\"let\"), last = node.getChild(\"in\");\n                    if (!first || !last)\n                        return null;\n                    return { from: first.to, to: last.from };\n                },\n            }),\n            /*@__PURE__*/styleTags({\n                Identifier: tags.propertyName,\n                Boolean: tags.bool,\n                String: tags.string,\n                IndentedString: tags.string,\n                LineComment: tags.lineComment,\n                BlockComment: tags.blockComment,\n                Float: tags.float,\n                Integer: tags.integer,\n                Null: tags.null,\n                URI: tags.url,\n                SPath: tags.literal,\n                Path: tags.literal,\n                \"( )\": tags.paren,\n                \"{ }\": tags.brace,\n                \"[ ]\": tags.squareBracket,\n                \"if then else\": tags.controlKeyword,\n                \"import with let in rec builtins inherit assert or\": tags.keyword,\n            }),\n        ],\n    }),\n    languageData: {\n        commentTokens: { line: \"#\", block: { open: \"/*\", close: \"*/\" } },\n        closeBrackets: { brackets: [\"(\", \"[\", \"{\", \"''\", '\"'] },\n        indentOnInput: /^\\s*(in|\\}|\\)|\\])$/,\n    },\n});\nconst snippets = [\n    /*@__PURE__*/snippetCompletion(\"let ${binds} in ${expression}\", {\n        label: \"let\",\n        detail: \"Let ... in statement\",\n        type: \"keyword\",\n    }),\n    /*@__PURE__*/snippetCompletion(\"with ${expression}; ${expression}\", {\n        label: \"with\",\n        detail: \"With statement\",\n        type: \"keyword\",\n    }),\n];\nfunction nix() {\n    return new LanguageSupport(nixLanguage, nixLanguage.data.of({\n        autocomplete: ifNotIn([\"LineComment\", \"BlockComment\", \"String\", \"IndentedString\"], completeFromList(snippets)),\n    }));\n}\n\nexport { nix, nixLanguage, parser };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}