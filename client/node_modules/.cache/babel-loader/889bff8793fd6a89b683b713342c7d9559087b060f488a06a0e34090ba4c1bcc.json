{"ast":null,"code":"/**\r\n * Converts a string from kebab-case to camelCase.\r\n */export function kebabToCamel(str){let spliced=str.split(\"\");for(let i=0;i<spliced.length;i++){if(spliced[i]===\"-\"&&spliced[i+1]!=null){spliced[i+1]=spliced[i+1].toUpperCase();spliced.splice(i,1);i--;}}return spliced.join(\"\");}/**\r\n * Changes the case of a string to the specified format.\r\n * @example\r\n * // Returns \"exampleStringWithAllCases\"\r\n * changeCase(\"-Example_string-with all-_ CASES__\", \"camel\");\r\n *\r\n * // Returns \"ExampleStringWithAllCases\"\r\n * changeCase(\"-Example_string-with all-_ CASES__\", \"pascal\");\r\n *\r\n * // Returns \"_example_string_with_all_cases_\"\r\n * changeCase(\"-Example_string-with all-_ CASES__\", \"snake\");\r\n *\r\n * // Returns \"-example-string-with-all-cases-\"\r\n * changeCase(\"-Example_string-with all-_ CASES__\", \"kebab\");\r\n *\r\n * // Returns \"_EXAMPLE_STRING_WITH_ALL_CASES_\"\r\n * changeCase(\"-Example_string-with all-_ CASES__\", \"scream\");\r\n *\r\n * // Returns \"EXAMPLESTRINGWITHALLCASES\"\r\n * changeCase(\"-Example_string-with all-_ CASES__\", \"upper\");\r\n\r\n * // Returns \"examplestringwithallcases\"\r\n * changeCase(\"-Example_string-with all-_ CASES__\", \"lower\");\r\n */export function changeCase(str,changeTo){if(str==null)return;switch(changeTo){case\"camel\":case\"pascal\":return toCamelOrPascalCase(str,changeTo);case\"snake\":case\"kebab\":case\"scream\":return toSnakeOrKebabOrScreamCase(str,changeTo);case\"upper\":case\"lower\":return toUpperOrLowerCase(str,changeTo);default:throw new Error(\"Invalid case: \".concat(changeTo));}}export function toCamelOrPascalCase(str,changeTo){let result=str.split(/[-_ ]+/).map(word=>word.charAt(0).toUpperCase()+word.slice(1).toLowerCase()).join(\"\");return changeTo===\"camel\"?result.charAt(0).toLowerCase()+result.slice(1):result;}export function toUpperOrLowerCase(str,changeTo){let result=str.replace(/[-_ ]+/g,\"\");return changeTo===\"upper\"?result.toUpperCase():result.toLowerCase();}export function toSnakeOrKebabOrScreamCase(str,changeTo){let separator=changeTo===\"kebab\"?\"-\":\"_\";let result=str.split(/[-_ ]+/).join(separator);if(changeTo===\"scream\"){result=result.toUpperCase();}return result.toLocaleLowerCase();}/**\r\n * removes a character at the index given.\r\n */export function rmCharAt(str,index){return str.slice(0,index)+str.slice(index+1);}/**\r\n * splice for strings\r\n */export function spice(string,start,deleteCount,insertString){return string.slice(0,start)+(insertString||\"\")+string.slice(start+(deleteCount||0));}/**\r\n * adds strToAdd to str at index.\r\n */export function addCharAt(str,strToAdd,index){return str.slice(0,index)+strToAdd+str.slice(index);}/**\r\n * toLowerCase but better\r\n */export function tolowercase(str){if(str===\" \")return\" \";if(str==null)return\" \";return str.toLowerCase();}export function kebabToSpacedPascal(str){if(str==null)return\"\";let spliced=str.split(\"-\");let upperCasedFirstChars=spliced.map(str=>{return spice(str,0,1,str[0].toUpperCase());});return upperCasedFirstChars.join(\" \");}","map":{"version":3,"names":["kebabToCamel","str","spliced","split","i","length","toUpperCase","splice","join","changeCase","changeTo","toCamelOrPascalCase","toSnakeOrKebabOrScreamCase","toUpperOrLowerCase","Error","concat","result","map","word","charAt","slice","toLowerCase","replace","separator","toLocaleLowerCase","rmCharAt","index","spice","string","start","deleteCount","insertString","addCharAt","strToAdd","tolowercase","kebabToSpacedPascal","upperCasedFirstChars"],"sources":["/Users/EL-CAPITAN-2016/Development/mentor/client/src/ts/utils/string.ts"],"sourcesContent":["/**\r\n * Converts a string from kebab-case to camelCase.\r\n */\r\nexport function kebabToCamel(str: string): string {\r\n    let spliced: string[] = str.split(\"\");\r\n    for (let i = 0; i < spliced.length; i++) {\r\n        if (spliced[i] === \"-\" && spliced[i + 1] != null) {\r\n            spliced[i + 1] = spliced[i + 1].toUpperCase();\r\n            spliced.splice(i, 1);\r\n            i--;\r\n        }\r\n    }\r\n    return spliced.join(\"\");\r\n}\r\n\r\n/**\r\n * Changes the case of a string to the specified format.\r\n * @example\r\n * // Returns \"exampleStringWithAllCases\"\r\n * changeCase(\"-Example_string-with all-_ CASES__\", \"camel\");\r\n *\r\n * // Returns \"ExampleStringWithAllCases\"\r\n * changeCase(\"-Example_string-with all-_ CASES__\", \"pascal\");\r\n *\r\n * // Returns \"_example_string_with_all_cases_\"\r\n * changeCase(\"-Example_string-with all-_ CASES__\", \"snake\");\r\n *\r\n * // Returns \"-example-string-with-all-cases-\"\r\n * changeCase(\"-Example_string-with all-_ CASES__\", \"kebab\");\r\n *\r\n * // Returns \"_EXAMPLE_STRING_WITH_ALL_CASES_\"\r\n * changeCase(\"-Example_string-with all-_ CASES__\", \"scream\");\r\n *\r\n * // Returns \"EXAMPLESTRINGWITHALLCASES\"\r\n * changeCase(\"-Example_string-with all-_ CASES__\", \"upper\");\r\n\r\n * // Returns \"examplestringwithallcases\"\r\n * changeCase(\"-Example_string-with all-_ CASES__\", \"lower\");\r\n */\r\nexport function changeCase(\r\n    str: string,\r\n    changeTo:\r\n        | \"camel\"\r\n        | \"pascal\"\r\n        | \"snake\"\r\n        | \"kebab\"\r\n        | \"scream\"\r\n        | \"upper\"\r\n        | \"lower\"\r\n) {\r\n    if (str == null) return;\r\n    switch (changeTo) {\r\n        case \"camel\":\r\n        case \"pascal\":\r\n            return toCamelOrPascalCase(str, changeTo);\r\n        case \"snake\":\r\n        case \"kebab\":\r\n        case \"scream\":\r\n            return toSnakeOrKebabOrScreamCase(str, changeTo);\r\n        case \"upper\":\r\n        case \"lower\":\r\n            return toUpperOrLowerCase(str, changeTo);\r\n        default:\r\n            throw new Error(`Invalid case: ${changeTo}`);\r\n    }\r\n}\r\n\r\nexport function toCamelOrPascalCase(str: string, changeTo: \"camel\" | \"pascal\") {\r\n    let result = str\r\n        .split(/[-_ ]+/)\r\n        .map(\r\n            (word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\r\n        )\r\n        .join(\"\");\r\n    return changeTo === \"camel\"\r\n        ? result.charAt(0).toLowerCase() + result.slice(1)\r\n        : result;\r\n}\r\n\r\nexport function toUpperOrLowerCase(str: string, changeTo: \"lower\" | \"upper\") {\r\n    let result = str.replace(/[-_ ]+/g, \"\");\r\n    return changeTo === \"upper\" ? result.toUpperCase() : result.toLowerCase();\r\n}\r\n\r\nexport function toSnakeOrKebabOrScreamCase(\r\n    str: string,\r\n    changeTo: \"snake\" | \"kebab\" | \"scream\"\r\n) {\r\n    let separator = changeTo === \"kebab\" ? \"-\" : \"_\";\r\n    let result = str.split(/[-_ ]+/).join(separator);\r\n    if (changeTo === \"scream\") {\r\n        result = result.toUpperCase();\r\n    }\r\n    return result.toLocaleLowerCase();\r\n}\r\n\r\n/**\r\n * removes a character at the index given.\r\n */\r\nexport function rmCharAt(str: string, index: number): string {\r\n    return str.slice(0, index) + str.slice(index + 1);\r\n}\r\n\r\n/**\r\n * splice for strings\r\n */\r\nexport function spice(\r\n    string: string,\r\n    start: number,\r\n    deleteCount: number,\r\n    insertString?: string\r\n): string {\r\n    return (\r\n        string.slice(0, start) +\r\n        (insertString || \"\") +\r\n        string.slice(start + (deleteCount || 0))\r\n    );\r\n}\r\n\r\n/**\r\n * adds strToAdd to str at index.\r\n */\r\nexport function addCharAt(\r\n    str: string,\r\n    strToAdd: string,\r\n    index: number\r\n): string {\r\n    return str.slice(0, index) + strToAdd + str.slice(index);\r\n}\r\n\r\n/**\r\n * toLowerCase but better\r\n */\r\nexport function tolowercase(str: string): string {\r\n    if (str === \" \") return \" \";\r\n    if (str == null) return \" \";\r\n    return str.toLowerCase();\r\n}\r\n\r\nexport function kebabToSpacedPascal(str: string) {\r\n    if (str == null) return \"\";\r\n    let spliced = str.split(\"-\");\r\n    let upperCasedFirstChars = spliced.map((str) => {\r\n        return spice(str, 0, 1, str[0].toUpperCase());\r\n    });\r\n    return upperCasedFirstChars.join(\" \");\r\n}\r\n"],"mappings":"AAAA;AACA;AACA,GACA,MAAO,SAAS,CAAAA,YAAYA,CAACC,GAAW,CAAU,CAC9C,GAAI,CAAAC,OAAiB,CAAGD,GAAG,CAACE,KAAK,CAAC,EAAE,CAAC,CACrC,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGF,OAAO,CAACG,MAAM,CAAED,CAAC,EAAE,CAAE,CACrC,GAAIF,OAAO,CAACE,CAAC,CAAC,GAAK,GAAG,EAAIF,OAAO,CAACE,CAAC,CAAG,CAAC,CAAC,EAAI,IAAI,CAAE,CAC9CF,OAAO,CAACE,CAAC,CAAG,CAAC,CAAC,CAAGF,OAAO,CAACE,CAAC,CAAG,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAC7CJ,OAAO,CAACK,MAAM,CAACH,CAAC,CAAE,CAAC,CAAC,CACpBA,CAAC,EAAE,CACP,CACJ,CACA,MAAO,CAAAF,OAAO,CAACM,IAAI,CAAC,EAAE,CAAC,CAC3B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,UAAUA,CACtBR,GAAW,CACXS,QAOa,CACf,CACE,GAAIT,GAAG,EAAI,IAAI,CAAE,OACjB,OAAQS,QAAQ,EACZ,IAAK,OAAO,CACZ,IAAK,QAAQ,CACT,MAAO,CAAAC,mBAAmB,CAACV,GAAG,CAAES,QAAQ,CAAC,CAC7C,IAAK,OAAO,CACZ,IAAK,OAAO,CACZ,IAAK,QAAQ,CACT,MAAO,CAAAE,0BAA0B,CAACX,GAAG,CAAES,QAAQ,CAAC,CACpD,IAAK,OAAO,CACZ,IAAK,OAAO,CACR,MAAO,CAAAG,kBAAkB,CAACZ,GAAG,CAAES,QAAQ,CAAC,CAC5C,QACI,KAAM,IAAI,CAAAI,KAAK,kBAAAC,MAAA,CAAkBL,QAAQ,CAAE,CAAC,CACpD,CACJ,CAEA,MAAO,SAAS,CAAAC,mBAAmBA,CAACV,GAAW,CAAES,QAA4B,CAAE,CAC3E,GAAI,CAAAM,MAAM,CAAGf,GAAG,CACXE,KAAK,CAAC,QAAQ,CAAC,CACfc,GAAG,CACCC,IAAI,EAAKA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACb,WAAW,CAAC,CAAC,CAAGY,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CACvE,CAAC,CACAb,IAAI,CAAC,EAAE,CAAC,CACb,MAAO,CAAAE,QAAQ,GAAK,OAAO,CACrBM,MAAM,CAACG,MAAM,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAAGL,MAAM,CAACI,KAAK,CAAC,CAAC,CAAC,CAChDJ,MAAM,CAChB,CAEA,MAAO,SAAS,CAAAH,kBAAkBA,CAACZ,GAAW,CAAES,QAA2B,CAAE,CACzE,GAAI,CAAAM,MAAM,CAAGf,GAAG,CAACqB,OAAO,CAAC,SAAS,CAAE,EAAE,CAAC,CACvC,MAAO,CAAAZ,QAAQ,GAAK,OAAO,CAAGM,MAAM,CAACV,WAAW,CAAC,CAAC,CAAGU,MAAM,CAACK,WAAW,CAAC,CAAC,CAC7E,CAEA,MAAO,SAAS,CAAAT,0BAA0BA,CACtCX,GAAW,CACXS,QAAsC,CACxC,CACE,GAAI,CAAAa,SAAS,CAAGb,QAAQ,GAAK,OAAO,CAAG,GAAG,CAAG,GAAG,CAChD,GAAI,CAAAM,MAAM,CAAGf,GAAG,CAACE,KAAK,CAAC,QAAQ,CAAC,CAACK,IAAI,CAACe,SAAS,CAAC,CAChD,GAAIb,QAAQ,GAAK,QAAQ,CAAE,CACvBM,MAAM,CAAGA,MAAM,CAACV,WAAW,CAAC,CAAC,CACjC,CACA,MAAO,CAAAU,MAAM,CAACQ,iBAAiB,CAAC,CAAC,CACrC,CAEA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,QAAQA,CAACxB,GAAW,CAAEyB,KAAa,CAAU,CACzD,MAAO,CAAAzB,GAAG,CAACmB,KAAK,CAAC,CAAC,CAAEM,KAAK,CAAC,CAAGzB,GAAG,CAACmB,KAAK,CAACM,KAAK,CAAG,CAAC,CAAC,CACrD,CAEA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,KAAKA,CACjBC,MAAc,CACdC,KAAa,CACbC,WAAmB,CACnBC,YAAqB,CACf,CACN,MACI,CAAAH,MAAM,CAACR,KAAK,CAAC,CAAC,CAAES,KAAK,CAAC,EACrBE,YAAY,EAAI,EAAE,CAAC,CACpBH,MAAM,CAACR,KAAK,CAACS,KAAK,EAAIC,WAAW,EAAI,CAAC,CAAC,CAAC,CAEhD,CAEA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,SAASA,CACrB/B,GAAW,CACXgC,QAAgB,CAChBP,KAAa,CACP,CACN,MAAO,CAAAzB,GAAG,CAACmB,KAAK,CAAC,CAAC,CAAEM,KAAK,CAAC,CAAGO,QAAQ,CAAGhC,GAAG,CAACmB,KAAK,CAACM,KAAK,CAAC,CAC5D,CAEA;AACA;AACA,GACA,MAAO,SAAS,CAAAQ,WAAWA,CAACjC,GAAW,CAAU,CAC7C,GAAIA,GAAG,GAAK,GAAG,CAAE,MAAO,GAAG,CAC3B,GAAIA,GAAG,EAAI,IAAI,CAAE,MAAO,GAAG,CAC3B,MAAO,CAAAA,GAAG,CAACoB,WAAW,CAAC,CAAC,CAC5B,CAEA,MAAO,SAAS,CAAAc,mBAAmBA,CAAClC,GAAW,CAAE,CAC7C,GAAIA,GAAG,EAAI,IAAI,CAAE,MAAO,EAAE,CAC1B,GAAI,CAAAC,OAAO,CAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC,CAC5B,GAAI,CAAAiC,oBAAoB,CAAGlC,OAAO,CAACe,GAAG,CAAEhB,GAAG,EAAK,CAC5C,MAAO,CAAA0B,KAAK,CAAC1B,GAAG,CAAE,CAAC,CAAE,CAAC,CAAEA,GAAG,CAAC,CAAC,CAAC,CAACK,WAAW,CAAC,CAAC,CAAC,CACjD,CAAC,CAAC,CACF,MAAO,CAAA8B,oBAAoB,CAAC5B,IAAI,CAAC,GAAG,CAAC,CACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}