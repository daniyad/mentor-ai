{"ast":null,"code":"import { parser } from '@lezer/sass';\nimport { LRLanguage, foldNodeProp, foldInside, indentNodeProp, continuedIndent, LanguageSupport } from '@codemirror/language';\nimport { defineCSSCompletionSource } from '@codemirror/lang-css';\n\n/**\nA language provider based on the [Lezer Sass\nparser](https://github.com/lezer-parser/sass), extended with\nhighlighting and indentation information.\n*/\nconst sassLanguage = /*@__PURE__*/LRLanguage.define({\n  name: \"sass\",\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/foldNodeProp.add({\n      Block: foldInside,\n      Comment(node, state) {\n        return {\n          from: node.from + 2,\n          to: state.sliceDoc(node.to - 2, node.to) == \"*/\" ? node.to - 2 : node.to\n        };\n      }\n    }), /*@__PURE__*/indentNodeProp.add({\n      Declaration: /*@__PURE__*/continuedIndent()\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      },\n      line: \"//\"\n    },\n    indentOnInput: /^\\s*\\}$/,\n    wordChars: \"$-\"\n  }\n});\nconst indentedSassLanguage = /*@__PURE__*/sassLanguage.configure({\n  dialect: \"indented\",\n  props: [/*@__PURE__*/indentNodeProp.add({\n    \"Block RuleSet\": cx => cx.baseIndent + cx.unit\n  }), /*@__PURE__*/foldNodeProp.add({\n    Block: node => ({\n      from: node.from,\n      to: node.to\n    })\n  })]\n});\n/**\nProperty, variable, $-variable, and value keyword completion\nsource.\n*/\nconst sassCompletionSource = /*@__PURE__*/defineCSSCompletionSource(node => node.name == \"VariableName\" || node.name == \"SassVariableName\");\n/**\nLanguage support for CSS.\n*/\nfunction sass(config) {\n  return new LanguageSupport((config === null || config === void 0 ? void 0 : config.indented) ? indentedSassLanguage : sassLanguage, sassLanguage.data.of({\n    autocomplete: sassCompletionSource\n  }));\n}\nexport { sass, sassCompletionSource, sassLanguage };","map":{"version":3,"names":["parser","LRLanguage","foldNodeProp","foldInside","indentNodeProp","continuedIndent","LanguageSupport","defineCSSCompletionSource","sassLanguage","define","name","configure","props","add","Block","Comment","node","state","from","to","sliceDoc","Declaration","languageData","commentTokens","block","open","close","line","indentOnInput","wordChars","indentedSassLanguage","dialect","cx","baseIndent","unit","sassCompletionSource","sass","config","indented","data","of","autocomplete"],"sources":["/Users/EL-CAPITAN-2016/Development/mentor/client/node_modules/@codemirror/lang-sass/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/sass';\nimport { LRLanguage, foldNodeProp, foldInside, indentNodeProp, continuedIndent, LanguageSupport } from '@codemirror/language';\nimport { defineCSSCompletionSource } from '@codemirror/lang-css';\n\n/**\nA language provider based on the [Lezer Sass\nparser](https://github.com/lezer-parser/sass), extended with\nhighlighting and indentation information.\n*/\nconst sassLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"sass\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/foldNodeProp.add({\n                Block: foldInside,\n                Comment(node, state) {\n                    return { from: node.from + 2, to: state.sliceDoc(node.to - 2, node.to) == \"*/\" ? node.to - 2 : node.to };\n                }\n            }),\n            /*@__PURE__*/indentNodeProp.add({\n                Declaration: /*@__PURE__*/continuedIndent()\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { block: { open: \"/*\", close: \"*/\" }, line: \"//\" },\n        indentOnInput: /^\\s*\\}$/,\n        wordChars: \"$-\"\n    }\n});\nconst indentedSassLanguage = /*@__PURE__*/sassLanguage.configure({\n    dialect: \"indented\",\n    props: [\n        /*@__PURE__*/indentNodeProp.add({\n            \"Block RuleSet\": cx => cx.baseIndent + cx.unit\n        }),\n        /*@__PURE__*/foldNodeProp.add({\n            Block: node => ({ from: node.from, to: node.to })\n        })\n    ]\n});\n/**\nProperty, variable, $-variable, and value keyword completion\nsource.\n*/\nconst sassCompletionSource = /*@__PURE__*/defineCSSCompletionSource(node => node.name == \"VariableName\" || node.name == \"SassVariableName\");\n/**\nLanguage support for CSS.\n*/\nfunction sass(config) {\n    return new LanguageSupport((config === null || config === void 0 ? void 0 : config.indented) ? indentedSassLanguage : sassLanguage, sassLanguage.data.of({ autocomplete: sassCompletionSource }));\n}\n\nexport { sass, sassCompletionSource, sassLanguage };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;AACpC,SAASC,UAAU,EAAEC,YAAY,EAAEC,UAAU,EAAEC,cAAc,EAAEC,eAAe,EAAEC,eAAe,QAAQ,sBAAsB;AAC7H,SAASC,yBAAyB,QAAQ,sBAAsB;;AAEhE;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,aAAaP,UAAU,CAACQ,MAAM,CAAC;EAChDC,IAAI,EAAE,MAAM;EACZV,MAAM,EAAE,aAAaA,MAAM,CAACW,SAAS,CAAC;IAClCC,KAAK,EAAE,CACH,aAAaV,YAAY,CAACW,GAAG,CAAC;MAC1BC,KAAK,EAAEX,UAAU;MACjBY,OAAOA,CAACC,IAAI,EAAEC,KAAK,EAAE;QACjB,OAAO;UAAEC,IAAI,EAAEF,IAAI,CAACE,IAAI,GAAG,CAAC;UAAEC,EAAE,EAAEF,KAAK,CAACG,QAAQ,CAACJ,IAAI,CAACG,EAAE,GAAG,CAAC,EAAEH,IAAI,CAACG,EAAE,CAAC,IAAI,IAAI,GAAGH,IAAI,CAACG,EAAE,GAAG,CAAC,GAAGH,IAAI,CAACG;QAAG,CAAC;MAC5G;IACJ,CAAC,CAAC,EACF,aAAaf,cAAc,CAACS,GAAG,CAAC;MAC5BQ,WAAW,EAAE,aAAahB,eAAe,CAAC;IAC9C,CAAC,CAAC;EAEV,CAAC,CAAC;EACFiB,YAAY,EAAE;IACVC,aAAa,EAAE;MAAEC,KAAK,EAAE;QAAEC,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC;MAAEC,IAAI,EAAE;IAAK,CAAC;IACjEC,aAAa,EAAE,SAAS;IACxBC,SAAS,EAAE;EACf;AACJ,CAAC,CAAC;AACF,MAAMC,oBAAoB,GAAG,aAAatB,YAAY,CAACG,SAAS,CAAC;EAC7DoB,OAAO,EAAE,UAAU;EACnBnB,KAAK,EAAE,CACH,aAAaR,cAAc,CAACS,GAAG,CAAC;IAC5B,eAAe,EAAEmB,EAAE,IAAIA,EAAE,CAACC,UAAU,GAAGD,EAAE,CAACE;EAC9C,CAAC,CAAC,EACF,aAAahC,YAAY,CAACW,GAAG,CAAC;IAC1BC,KAAK,EAAEE,IAAI,KAAK;MAAEE,IAAI,EAAEF,IAAI,CAACE,IAAI;MAAEC,EAAE,EAAEH,IAAI,CAACG;IAAG,CAAC;EACpD,CAAC,CAAC;AAEV,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA,MAAMgB,oBAAoB,GAAG,aAAa5B,yBAAyB,CAACS,IAAI,IAAIA,IAAI,CAACN,IAAI,IAAI,cAAc,IAAIM,IAAI,CAACN,IAAI,IAAI,kBAAkB,CAAC;AAC3I;AACA;AACA;AACA,SAAS0B,IAAIA,CAACC,MAAM,EAAE;EAClB,OAAO,IAAI/B,eAAe,CAAC,CAAC+B,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACC,QAAQ,IAAIR,oBAAoB,GAAGtB,YAAY,EAAEA,YAAY,CAAC+B,IAAI,CAACC,EAAE,CAAC;IAAEC,YAAY,EAAEN;EAAqB,CAAC,CAAC,CAAC;AACrM;AAEA,SAASC,IAAI,EAAED,oBAAoB,EAAE3B,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}