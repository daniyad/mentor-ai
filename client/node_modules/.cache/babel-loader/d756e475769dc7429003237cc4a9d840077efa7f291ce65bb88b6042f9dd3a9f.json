{"ast":null,"code":"var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\nvar keywordRegex = new RegExp(\"\\\\b((\" + cons.join(\")|(\") + \"))$\", 'i');\nexport const yaml = {\n  name: \"yaml\",\n  token: function (stream, state) {\n    var ch = stream.peek();\n    var esc = state.escaped;\n    state.escaped = false;\n    /* comments */\n    if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/)) return \"string\";\n    if (state.literal && stream.indentation() > state.keyCol) {\n      stream.skipToEnd();\n      return \"string\";\n    } else if (state.literal) {\n      state.literal = false;\n    }\n    if (stream.sol()) {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      /* document start */\n      if (stream.match('---')) {\n        return \"def\";\n      }\n      /* document end */\n      if (stream.match('...')) {\n        return \"def\";\n      }\n      /* array list item */\n      if (stream.match(/^\\s*-\\s+/)) {\n        return 'meta';\n      }\n    }\n    /* inline pairs/lists */\n    if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n      if (ch == '{') state.inlinePairs++;else if (ch == '}') state.inlinePairs--;else if (ch == '[') state.inlineList++;else state.inlineList--;\n      return 'meta';\n    }\n\n    /* list separator */\n    if (state.inlineList > 0 && !esc && ch == ',') {\n      stream.next();\n      return 'meta';\n    }\n    /* pairs separator */\n    if (state.inlinePairs > 0 && !esc && ch == ',') {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      stream.next();\n      return 'meta';\n    }\n\n    /* start of value of a pair */\n    if (state.pairStart) {\n      /* block literals */\n      if (stream.match(/^\\s*(\\||\\>)\\s*/)) {\n        state.literal = true;\n        return 'meta';\n      }\n      ;\n      /* references */\n      if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) {\n        return 'variable';\n      }\n      /* numbers */\n      if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) {\n        return 'number';\n      }\n      if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) {\n        return 'number';\n      }\n      /* keywords */\n      if (stream.match(keywordRegex)) {\n        return 'keyword';\n      }\n    }\n\n    /* pairs (associative arrays) -> key */\n    if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n      state.pair = true;\n      state.keyCol = stream.indentation();\n      return \"atom\";\n    }\n    if (state.pair && stream.match(/^:\\s*/)) {\n      state.pairStart = true;\n      return 'meta';\n    }\n\n    /* nothing found, continue */\n    state.pairStart = false;\n    state.escaped = ch == '\\\\';\n    stream.next();\n    return null;\n  },\n  startState: function () {\n    return {\n      pair: false,\n      pairStart: false,\n      keyCol: 0,\n      inlinePairs: 0,\n      inlineList: 0,\n      literal: false,\n      escaped: false\n    };\n  },\n  languageData: {\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n};","map":{"version":3,"names":["cons","keywordRegex","RegExp","join","yaml","name","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","languageData","commentTokens","line"],"sources":["/Users/EL-CAPITAN-2016/Development/mentor/client/node_modules/@codemirror/legacy-modes/mode/yaml.js"],"sourcesContent":["var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\nvar keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\nexport const yaml = {\n  name: \"yaml\",\n  token: function(stream, state) {\n    var ch = stream.peek();\n    var esc = state.escaped;\n    state.escaped = false;\n    /* comments */\n    if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n      return \"string\";\n\n    if (state.literal && stream.indentation() > state.keyCol) {\n      stream.skipToEnd(); return \"string\";\n    } else if (state.literal) { state.literal = false; }\n    if (stream.sol()) {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      /* document start */\n      if(stream.match('---')) { return \"def\"; }\n      /* document end */\n      if (stream.match('...')) { return \"def\"; }\n      /* array list item */\n      if (stream.match(/^\\s*-\\s+/)) { return 'meta'; }\n    }\n    /* inline pairs/lists */\n    if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n      if (ch == '{')\n        state.inlinePairs++;\n      else if (ch == '}')\n        state.inlinePairs--;\n      else if (ch == '[')\n        state.inlineList++;\n      else\n        state.inlineList--;\n      return 'meta';\n    }\n\n    /* list separator */\n    if (state.inlineList > 0 && !esc && ch == ',') {\n      stream.next();\n      return 'meta';\n    }\n    /* pairs separator */\n    if (state.inlinePairs > 0 && !esc && ch == ',') {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      stream.next();\n      return 'meta';\n    }\n\n    /* start of value of a pair */\n    if (state.pairStart) {\n      /* block literals */\n      if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n      /* references */\n      if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable'; }\n      /* numbers */\n      if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n      if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n      /* keywords */\n      if (stream.match(keywordRegex)) { return 'keyword'; }\n    }\n\n    /* pairs (associative arrays) -> key */\n    if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n      state.pair = true;\n      state.keyCol = stream.indentation();\n      return \"atom\";\n    }\n    if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n    /* nothing found, continue */\n    state.pairStart = false;\n    state.escaped = (ch == '\\\\');\n    stream.next();\n    return null;\n  },\n  startState: function() {\n    return {\n      pair: false,\n      pairStart: false,\n      keyCol: 0,\n      inlinePairs: 0,\n      inlineList: 0,\n      literal: false,\n      escaped: false\n    };\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}